{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\n\n/*\n * Parses a string or buffer into an object\n * @param {(string|Buffer)} src - source to be parsed\n * @returns {Object} keys and values from src\n*/\nfunction parse(src) {\n  const obj = {};\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/);\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1];\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || '';\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0;\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n');\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim();\n      obj[key] = value;\n    }\n  });\n  return obj;\n}\n\n/*\n * Main entry point into dotenv. Allows configuration before loading .env\n * @param {Object} options - options for parsing .env file\n * @param {string} [options.path=.env] - path to .env file\n * @param {string} [options.encoding=utf8] - encoding of .env file\n * @returns {Object} parsed object or error\n*/\nfunction config(options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding = 'utf8';\n  if (options) {\n    if (options.path) {\n      dotenvPath = options.path;\n    }\n    if (options.encoding) {\n      encoding = options.encoding;\n    }\n  }\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }));\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key];\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\nmodule.exports.config = config;\nmodule.exports.load = config;\nmodule.exports.parse = parse;","map":{"version":3,"names":["fs","require","path","parse","src","obj","toString","split","forEach","line","keyValueArr","match","key","value","len","length","charAt","replace","trim","config","options","dotenvPath","resolve","process","cwd","encoding","parsed","readFileSync","Object","keys","env","hasOwnProperty","e","error","module","exports","load"],"sources":["D:/find-knowledge/node_modules/dotenv/lib/main.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\n\n/*\n * Parses a string or buffer into an object\n * @param {(string|Buffer)} src - source to be parsed\n * @returns {Object} keys and values from src\n*/\nfunction parse (src) {\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || ''\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n')\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\n\n      obj[key] = value\n    }\n  })\n\n  return obj\n}\n\n/*\n * Main entry point into dotenv. Allows configuration before loading .env\n * @param {Object} options - options for parsing .env file\n * @param {string} [options.path=.env] - path to .env file\n * @param {string} [options.encoding=utf8] - encoding of .env file\n * @returns {Object} parsed object or error\n*/\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n\n  if (options) {\n    if (options.path) {\n      dotenvPath = options.path\n    }\n    if (options.encoding) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key]\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.load = config\nmodule.exports.parse = parse\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA,SAASE,KAAK,CAAEC,GAAG,EAAE;EACnB,MAAMC,GAAG,GAAG,CAAC,CAAC;;EAEd;EACAD,GAAG,CAACE,QAAQ,EAAE,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAC,UAAUC,IAAI,EAAE;IACjD;IACA,MAAMC,WAAW,GAAGD,IAAI,CAACE,KAAK,CAAC,+BAA+B,CAAC;IAC/D;IACA,IAAID,WAAW,IAAI,IAAI,EAAE;MACvB,MAAME,GAAG,GAAGF,WAAW,CAAC,CAAC,CAAC;;MAE1B;MACA,IAAIG,KAAK,GAAGH,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE;;MAEhC;MACA,MAAMI,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACE,MAAM,GAAG,CAAC;MACpC,IAAID,GAAG,GAAG,CAAC,IAAID,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIH,KAAK,CAACG,MAAM,CAACF,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACvED,KAAK,GAAGA,KAAK,CAACI,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;MACtC;;MAEA;MACAJ,KAAK,GAAGA,KAAK,CAACI,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAACC,IAAI,EAAE;MAElDb,GAAG,CAACO,GAAG,CAAC,GAAGC,KAAK;IAClB;EACF,CAAC,CAAC;EAEF,OAAOR,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASc,MAAM,CAAEC,OAAO,EAAE;EACxB,IAAIC,UAAU,GAAGnB,IAAI,CAACoB,OAAO,CAACC,OAAO,CAACC,GAAG,EAAE,EAAE,MAAM,CAAC;EACpD,IAAIC,QAAQ,GAAG,MAAM;EAErB,IAAIL,OAAO,EAAE;IACX,IAAIA,OAAO,CAAClB,IAAI,EAAE;MAChBmB,UAAU,GAAGD,OAAO,CAAClB,IAAI;IAC3B;IACA,IAAIkB,OAAO,CAACK,QAAQ,EAAE;MACpBA,QAAQ,GAAGL,OAAO,CAACK,QAAQ;IAC7B;EACF;EAEA,IAAI;IACF;IACA,MAAMC,MAAM,GAAGvB,KAAK,CAACH,EAAE,CAAC2B,YAAY,CAACN,UAAU,EAAE;MAAEI;IAAS,CAAC,CAAC,CAAC;IAE/DG,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAAClB,OAAO,CAAC,UAAUI,GAAG,EAAE;MACzC,IAAI,CAACW,OAAO,CAACO,GAAG,CAACC,cAAc,CAACnB,GAAG,CAAC,EAAE;QACpCW,OAAO,CAACO,GAAG,CAAClB,GAAG,CAAC,GAAGc,MAAM,CAACd,GAAG,CAAC;MAChC;IACF,CAAC,CAAC;IAEF,OAAO;MAAEc;IAAO,CAAC;EACnB,CAAC,CAAC,OAAOM,CAAC,EAAE;IACV,OAAO;MAAEC,KAAK,EAAED;IAAE,CAAC;EACrB;AACF;AAEAE,MAAM,CAACC,OAAO,CAAChB,MAAM,GAAGA,MAAM;AAC9Be,MAAM,CAACC,OAAO,CAACC,IAAI,GAAGjB,MAAM;AAC5Be,MAAM,CAACC,OAAO,CAAChC,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}